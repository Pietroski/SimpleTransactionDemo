// Code generated by go-migrate. DO NOT EDIT.
// source: transaction_record.sql

package sqlc_bank_account_store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const listFromAccountTransactionLogs = `-- name: ListFromAccountTransactionLogs :many
SELECT row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
FROM transaction_record
WHERE from_account_id = $1
ORDER BY row_id
`

func (q *Queries) ListFromAccountTransactionLogs(ctx context.Context, fromAccountID uuid.UUID) ([]TransactionRecord, error) {
	rows, err := q.query(ctx, q.listFromAccountTransactionLogsStmt, listFromAccountTransactionLogs, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionRecord{}
	for rows.Next() {
		var i TransactionRecord
		if err := rows.Scan(
			&i.RowID,
			&i.FromAccountID,
			&i.FromWalletID,
			&i.ToAccountID,
			&i.ToWalletID,
			&i.Coin,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaginatedFromAccountTransactionLogs = `-- name: ListPaginatedFromAccountTransactionLogs :many
SELECT row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
FROM transaction_record
WHERE from_account_id = $1
ORDER BY row_id
LIMIT $2 OFFSET $3
`

type ListPaginatedFromAccountTransactionLogsParams struct {
	FromAccountID uuid.UUID `json:"fromAccountID"`
	Limit         int32     `json:"limit"`
	Offset        int32     `json:"offset"`
}

func (q *Queries) ListPaginatedFromAccountTransactionLogs(ctx context.Context, arg ListPaginatedFromAccountTransactionLogsParams) ([]TransactionRecord, error) {
	rows, err := q.query(ctx, q.listPaginatedFromAccountTransactionLogsStmt, listPaginatedFromAccountTransactionLogs, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionRecord{}
	for rows.Next() {
		var i TransactionRecord
		if err := rows.Scan(
			&i.RowID,
			&i.FromAccountID,
			&i.FromWalletID,
			&i.ToAccountID,
			&i.ToWalletID,
			&i.Coin,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaginatedToAccountTransactionLogs = `-- name: ListPaginatedToAccountTransactionLogs :many
SELECT row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
FROM transaction_record
WHERE to_account_id = $1
ORDER BY row_id
LIMIT $2 OFFSET $3
`

type ListPaginatedToAccountTransactionLogsParams struct {
	ToAccountID uuid.UUID `json:"toAccountID"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) ListPaginatedToAccountTransactionLogs(ctx context.Context, arg ListPaginatedToAccountTransactionLogsParams) ([]TransactionRecord, error) {
	rows, err := q.query(ctx, q.listPaginatedToAccountTransactionLogsStmt, listPaginatedToAccountTransactionLogs, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionRecord{}
	for rows.Next() {
		var i TransactionRecord
		if err := rows.Scan(
			&i.RowID,
			&i.FromAccountID,
			&i.FromWalletID,
			&i.ToAccountID,
			&i.ToWalletID,
			&i.Coin,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaginatedTransactionLogs = `-- name: ListPaginatedTransactionLogs :many
SELECT row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
FROM transaction_record
ORDER BY row_id
LIMIT $1 OFFSET $2
`

type ListPaginatedTransactionLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaginatedTransactionLogs(ctx context.Context, arg ListPaginatedTransactionLogsParams) ([]TransactionRecord, error) {
	rows, err := q.query(ctx, q.listPaginatedTransactionLogsStmt, listPaginatedTransactionLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionRecord{}
	for rows.Next() {
		var i TransactionRecord
		if err := rows.Scan(
			&i.RowID,
			&i.FromAccountID,
			&i.FromWalletID,
			&i.ToAccountID,
			&i.ToWalletID,
			&i.Coin,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToAccountTransactionLogs = `-- name: ListToAccountTransactionLogs :many
SELECT row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
FROM transaction_record
WHERE to_account_id = $1
ORDER BY row_id
`

func (q *Queries) ListToAccountTransactionLogs(ctx context.Context, toAccountID uuid.UUID) ([]TransactionRecord, error) {
	rows, err := q.query(ctx, q.listToAccountTransactionLogsStmt, listToAccountTransactionLogs, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionRecord{}
	for rows.Next() {
		var i TransactionRecord
		if err := rows.Scan(
			&i.RowID,
			&i.FromAccountID,
			&i.FromWalletID,
			&i.ToAccountID,
			&i.ToWalletID,
			&i.Coin,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionLogs = `-- name: ListTransactionLogs :many
SELECT row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
FROM transaction_record
ORDER BY row_id
`

func (q *Queries) ListTransactionLogs(ctx context.Context) ([]TransactionRecord, error) {
	rows, err := q.query(ctx, q.listTransactionLogsStmt, listTransactionLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionRecord{}
	for rows.Next() {
		var i TransactionRecord
		if err := rows.Scan(
			&i.RowID,
			&i.FromAccountID,
			&i.FromWalletID,
			&i.ToAccountID,
			&i.ToWalletID,
			&i.Coin,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logTransaction = `-- name: LogTransaction :one
INSERT INTO transaction_record
(from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING row_id, from_account_id, from_wallet_id, to_account_id, to_wallet_id, coin, amount, created_at
`

type LogTransactionParams struct {
	FromAccountID uuid.UUID        `json:"fromAccountID"`
	FromWalletID  uuid.UUID        `json:"fromWalletID"`
	ToAccountID   uuid.UUID        `json:"toAccountID"`
	ToWalletID    uuid.UUID        `json:"toWalletID"`
	Coin          CryptoCurrencies `json:"coin"`
	Amount        int64            `json:"amount"`
	CreatedAt     time.Time        `json:"createdAt"`
}

func (q *Queries) LogTransaction(ctx context.Context, arg LogTransactionParams) (TransactionRecord, error) {
	row := q.queryRow(ctx, q.logTransactionStmt, logTransaction,
		arg.FromAccountID,
		arg.FromWalletID,
		arg.ToAccountID,
		arg.ToWalletID,
		arg.Coin,
		arg.Amount,
		arg.CreatedAt,
	)
	var i TransactionRecord
	err := row.Scan(
		&i.RowID,
		&i.FromAccountID,
		&i.FromWalletID,
		&i.ToAccountID,
		&i.ToWalletID,
		&i.Coin,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
