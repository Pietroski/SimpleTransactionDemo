// Code generated by sqlc. DO NOT EDIT.

package sqlc_bank_account_store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getAccountWalletsStmt, err = db.PrepareContext(ctx, getAccountWallets); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountWallets: %w", err)
	}
	if q.getPaginatedAccountWalletsStmt, err = db.PrepareContext(ctx, getPaginatedAccountWallets); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedAccountWallets: %w", err)
	}
	if q.getPaginatedWalletsByAccountIDStmt, err = db.PrepareContext(ctx, getPaginatedWalletsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedWalletsByAccountID: %w", err)
	}
	if q.getTxWalletStmt, err = db.PrepareContext(ctx, getTxWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetTxWallet: %w", err)
	}
	if q.getWalletsByAccountIDStmt, err = db.PrepareContext(ctx, getWalletsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletsByAccountID: %w", err)
	}
	if q.listCoinEntryLogsByAccountIDStmt, err = db.PrepareContext(ctx, listCoinEntryLogsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query ListCoinEntryLogsByAccountID: %w", err)
	}
	if q.listEntryLogsStmt, err = db.PrepareContext(ctx, listEntryLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntryLogs: %w", err)
	}
	if q.listEntryLogsByAccountIDStmt, err = db.PrepareContext(ctx, listEntryLogsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntryLogsByAccountID: %w", err)
	}
	if q.listFromAccountTransactionLogsStmt, err = db.PrepareContext(ctx, listFromAccountTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListFromAccountTransactionLogs: %w", err)
	}
	if q.listPaginatedCoinEntryLogsByAccountIDStmt, err = db.PrepareContext(ctx, listPaginatedCoinEntryLogsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedCoinEntryLogsByAccountID: %w", err)
	}
	if q.listPaginatedEntryLogsStmt, err = db.PrepareContext(ctx, listPaginatedEntryLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedEntryLogs: %w", err)
	}
	if q.listPaginatedEntryLogsByAccountIDStmt, err = db.PrepareContext(ctx, listPaginatedEntryLogsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedEntryLogsByAccountID: %w", err)
	}
	if q.listPaginatedFromAccountTransactionLogsStmt, err = db.PrepareContext(ctx, listPaginatedFromAccountTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedFromAccountTransactionLogs: %w", err)
	}
	if q.listPaginatedToAccountTransactionLogsStmt, err = db.PrepareContext(ctx, listPaginatedToAccountTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedToAccountTransactionLogs: %w", err)
	}
	if q.listPaginatedTransactionLogsStmt, err = db.PrepareContext(ctx, listPaginatedTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedTransactionLogs: %w", err)
	}
	if q.listToAccountTransactionLogsStmt, err = db.PrepareContext(ctx, listToAccountTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListToAccountTransactionLogs: %w", err)
	}
	if q.listTransactionLogsStmt, err = db.PrepareContext(ctx, listTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactionLogs: %w", err)
	}
	if q.logEntryStmt, err = db.PrepareContext(ctx, logEntry); err != nil {
		return nil, fmt.Errorf("error preparing query LogEntry: %w", err)
	}
	if q.logTransactionStmt, err = db.PrepareContext(ctx, logTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query LogTransaction: %w", err)
	}
	if q.logTransactionWithEntriesSimplifiedStmt, err = db.PrepareContext(ctx, logTransactionWithEntriesSimplified); err != nil {
		return nil, fmt.Errorf("error preparing query LogTransactionWithEntriesSimplified: %w", err)
	}
	if q.updateAccountWalletBalanceStmt, err = db.PrepareContext(ctx, updateAccountWalletBalance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountWalletBalance: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getAccountWalletsStmt != nil {
		if cerr := q.getAccountWalletsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountWalletsStmt: %w", cerr)
		}
	}
	if q.getPaginatedAccountWalletsStmt != nil {
		if cerr := q.getPaginatedAccountWalletsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedAccountWalletsStmt: %w", cerr)
		}
	}
	if q.getPaginatedWalletsByAccountIDStmt != nil {
		if cerr := q.getPaginatedWalletsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedWalletsByAccountIDStmt: %w", cerr)
		}
	}
	if q.getTxWalletStmt != nil {
		if cerr := q.getTxWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTxWalletStmt: %w", cerr)
		}
	}
	if q.getWalletsByAccountIDStmt != nil {
		if cerr := q.getWalletsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletsByAccountIDStmt: %w", cerr)
		}
	}
	if q.listCoinEntryLogsByAccountIDStmt != nil {
		if cerr := q.listCoinEntryLogsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCoinEntryLogsByAccountIDStmt: %w", cerr)
		}
	}
	if q.listEntryLogsStmt != nil {
		if cerr := q.listEntryLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntryLogsStmt: %w", cerr)
		}
	}
	if q.listEntryLogsByAccountIDStmt != nil {
		if cerr := q.listEntryLogsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntryLogsByAccountIDStmt: %w", cerr)
		}
	}
	if q.listFromAccountTransactionLogsStmt != nil {
		if cerr := q.listFromAccountTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFromAccountTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedCoinEntryLogsByAccountIDStmt != nil {
		if cerr := q.listPaginatedCoinEntryLogsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedCoinEntryLogsByAccountIDStmt: %w", cerr)
		}
	}
	if q.listPaginatedEntryLogsStmt != nil {
		if cerr := q.listPaginatedEntryLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedEntryLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedEntryLogsByAccountIDStmt != nil {
		if cerr := q.listPaginatedEntryLogsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedEntryLogsByAccountIDStmt: %w", cerr)
		}
	}
	if q.listPaginatedFromAccountTransactionLogsStmt != nil {
		if cerr := q.listPaginatedFromAccountTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedFromAccountTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedToAccountTransactionLogsStmt != nil {
		if cerr := q.listPaginatedToAccountTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedToAccountTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedTransactionLogsStmt != nil {
		if cerr := q.listPaginatedTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listToAccountTransactionLogsStmt != nil {
		if cerr := q.listToAccountTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listToAccountTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listTransactionLogsStmt != nil {
		if cerr := q.listTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionLogsStmt: %w", cerr)
		}
	}
	if q.logEntryStmt != nil {
		if cerr := q.logEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing logEntryStmt: %w", cerr)
		}
	}
	if q.logTransactionStmt != nil {
		if cerr := q.logTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing logTransactionStmt: %w", cerr)
		}
	}
	if q.logTransactionWithEntriesSimplifiedStmt != nil {
		if cerr := q.logTransactionWithEntriesSimplifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing logTransactionWithEntriesSimplifiedStmt: %w", cerr)
		}
	}
	if q.updateAccountWalletBalanceStmt != nil {
		if cerr := q.updateAccountWalletBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountWalletBalanceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                          DBTX
	tx                                          *sql.Tx
	getAccountWalletsStmt                       *sql.Stmt
	getPaginatedAccountWalletsStmt              *sql.Stmt
	getPaginatedWalletsByAccountIDStmt          *sql.Stmt
	getTxWalletStmt                             *sql.Stmt
	getWalletsByAccountIDStmt                   *sql.Stmt
	listCoinEntryLogsByAccountIDStmt            *sql.Stmt
	listEntryLogsStmt                           *sql.Stmt
	listEntryLogsByAccountIDStmt                *sql.Stmt
	listFromAccountTransactionLogsStmt          *sql.Stmt
	listPaginatedCoinEntryLogsByAccountIDStmt   *sql.Stmt
	listPaginatedEntryLogsStmt                  *sql.Stmt
	listPaginatedEntryLogsByAccountIDStmt       *sql.Stmt
	listPaginatedFromAccountTransactionLogsStmt *sql.Stmt
	listPaginatedToAccountTransactionLogsStmt   *sql.Stmt
	listPaginatedTransactionLogsStmt            *sql.Stmt
	listToAccountTransactionLogsStmt            *sql.Stmt
	listTransactionLogsStmt                     *sql.Stmt
	logEntryStmt                                *sql.Stmt
	logTransactionStmt                          *sql.Stmt
	logTransactionWithEntriesSimplifiedStmt     *sql.Stmt
	updateAccountWalletBalanceStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		getAccountWalletsStmt:              q.getAccountWalletsStmt,
		getPaginatedAccountWalletsStmt:     q.getPaginatedAccountWalletsStmt,
		getPaginatedWalletsByAccountIDStmt: q.getPaginatedWalletsByAccountIDStmt,
		getTxWalletStmt:                    q.getTxWalletStmt,
		getWalletsByAccountIDStmt:          q.getWalletsByAccountIDStmt,
		listCoinEntryLogsByAccountIDStmt:   q.listCoinEntryLogsByAccountIDStmt,
		listEntryLogsStmt:                  q.listEntryLogsStmt,
		listEntryLogsByAccountIDStmt:       q.listEntryLogsByAccountIDStmt,
		listFromAccountTransactionLogsStmt: q.listFromAccountTransactionLogsStmt,
		listPaginatedCoinEntryLogsByAccountIDStmt:   q.listPaginatedCoinEntryLogsByAccountIDStmt,
		listPaginatedEntryLogsStmt:                  q.listPaginatedEntryLogsStmt,
		listPaginatedEntryLogsByAccountIDStmt:       q.listPaginatedEntryLogsByAccountIDStmt,
		listPaginatedFromAccountTransactionLogsStmt: q.listPaginatedFromAccountTransactionLogsStmt,
		listPaginatedToAccountTransactionLogsStmt:   q.listPaginatedToAccountTransactionLogsStmt,
		listPaginatedTransactionLogsStmt:            q.listPaginatedTransactionLogsStmt,
		listToAccountTransactionLogsStmt:            q.listToAccountTransactionLogsStmt,
		listTransactionLogsStmt:                     q.listTransactionLogsStmt,
		logEntryStmt:                                q.logEntryStmt,
		logTransactionStmt:                          q.logTransactionStmt,
		logTransactionWithEntriesSimplifiedStmt:     q.logTransactionWithEntriesSimplifiedStmt,
		updateAccountWalletBalanceStmt:              q.updateAccountWalletBalanceStmt,
	}
}
