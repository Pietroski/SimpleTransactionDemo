// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Pietroski/SimpleTransactionDemo/internal/adaptors/datastore/postgresql/manager/bank-accounts/sqlc (interfaces: Store)

// Package mockedTransactionStore is a generated GoMock package.
package mockedTransactionStore

import (
	context "context"
	reflect "reflect"

	sqlc_bank_account_store "github.com/Pietroski/SimpleTransactionDemo/internal/adaptors/datastore/postgresql/manager/bank-accounts/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DepositTx mocks base method.
func (m *MockStore) DepositTx(arg0 context.Context, arg1 sqlc_bank_account_store.DepositTxParams) (sqlc_bank_account_store.DepositTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.DepositTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositTx indicates an expected call of DepositTx.
func (mr *MockStoreMockRecorder) DepositTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositTx", reflect.TypeOf((*MockStore)(nil).DepositTx), arg0, arg1)
}

// GetAccountWallets mocks base method.
func (m *MockStore) GetAccountWallets(arg0 context.Context, arg1 uuid.UUID) ([]sqlc_bank_account_store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountWallets", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWallets indicates an expected call of GetAccountWallets.
func (mr *MockStoreMockRecorder) GetAccountWallets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWallets", reflect.TypeOf((*MockStore)(nil).GetAccountWallets), arg0, arg1)
}

// GetPaginatedAccountWallets mocks base method.
func (m *MockStore) GetPaginatedAccountWallets(arg0 context.Context, arg1 sqlc_bank_account_store.GetPaginatedAccountWalletsParams) ([]sqlc_bank_account_store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedAccountWallets", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedAccountWallets indicates an expected call of GetPaginatedAccountWallets.
func (mr *MockStoreMockRecorder) GetPaginatedAccountWallets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedAccountWallets", reflect.TypeOf((*MockStore)(nil).GetPaginatedAccountWallets), arg0, arg1)
}

// GetPaginatedWalletsByAccountID mocks base method.
func (m *MockStore) GetPaginatedWalletsByAccountID(arg0 context.Context, arg1 sqlc_bank_account_store.GetPaginatedWalletsByAccountIDParams) ([]sqlc_bank_account_store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedWalletsByAccountID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedWalletsByAccountID indicates an expected call of GetPaginatedWalletsByAccountID.
func (mr *MockStoreMockRecorder) GetPaginatedWalletsByAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedWalletsByAccountID", reflect.TypeOf((*MockStore)(nil).GetPaginatedWalletsByAccountID), arg0, arg1)
}

// GetTxWallet mocks base method.
func (m *MockStore) GetTxWallet(arg0 context.Context, arg1 sqlc_bank_account_store.GetTxWalletParams) (sqlc_bank_account_store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxWallet", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxWallet indicates an expected call of GetTxWallet.
func (mr *MockStoreMockRecorder) GetTxWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxWallet", reflect.TypeOf((*MockStore)(nil).GetTxWallet), arg0, arg1)
}

// GetWalletsByAccountID mocks base method.
func (m *MockStore) GetWalletsByAccountID(arg0 context.Context, arg1 uuid.UUID) ([]sqlc_bank_account_store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsByAccountID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsByAccountID indicates an expected call of GetWalletsByAccountID.
func (mr *MockStoreMockRecorder) GetWalletsByAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsByAccountID", reflect.TypeOf((*MockStore)(nil).GetWalletsByAccountID), arg0, arg1)
}

// ListEntryLogs mocks base method.
func (m *MockStore) ListEntryLogs(arg0 context.Context) ([]sqlc_bank_account_store.EntryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntryLogs", arg0)
	ret0, _ := ret[0].([]sqlc_bank_account_store.EntryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntryLogs indicates an expected call of ListEntryLogs.
func (mr *MockStoreMockRecorder) ListEntryLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntryLogs", reflect.TypeOf((*MockStore)(nil).ListEntryLogs), arg0)
}

// ListEntryLogsByAccountID mocks base method.
func (m *MockStore) ListEntryLogsByAccountID(arg0 context.Context, arg1 uuid.UUID) ([]sqlc_bank_account_store.EntryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntryLogsByAccountID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.EntryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntryLogsByAccountID indicates an expected call of ListEntryLogsByAccountID.
func (mr *MockStoreMockRecorder) ListEntryLogsByAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntryLogsByAccountID", reflect.TypeOf((*MockStore)(nil).ListEntryLogsByAccountID), arg0, arg1)
}

// ListFromAccountTransactionLogs mocks base method.
func (m *MockStore) ListFromAccountTransactionLogs(arg0 context.Context, arg1 uuid.UUID) ([]sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFromAccountTransactionLogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFromAccountTransactionLogs indicates an expected call of ListFromAccountTransactionLogs.
func (mr *MockStoreMockRecorder) ListFromAccountTransactionLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFromAccountTransactionLogs", reflect.TypeOf((*MockStore)(nil).ListFromAccountTransactionLogs), arg0, arg1)
}

// ListPaginatedEntryLogs mocks base method.
func (m *MockStore) ListPaginatedEntryLogs(arg0 context.Context, arg1 sqlc_bank_account_store.ListPaginatedEntryLogsParams) ([]sqlc_bank_account_store.EntryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedEntryLogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.EntryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedEntryLogs indicates an expected call of ListPaginatedEntryLogs.
func (mr *MockStoreMockRecorder) ListPaginatedEntryLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedEntryLogs", reflect.TypeOf((*MockStore)(nil).ListPaginatedEntryLogs), arg0, arg1)
}

// ListPaginatedEntryLogsByAccountID mocks base method.
func (m *MockStore) ListPaginatedEntryLogsByAccountID(arg0 context.Context, arg1 sqlc_bank_account_store.ListPaginatedEntryLogsByAccountIDParams) ([]sqlc_bank_account_store.EntryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedEntryLogsByAccountID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.EntryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedEntryLogsByAccountID indicates an expected call of ListPaginatedEntryLogsByAccountID.
func (mr *MockStoreMockRecorder) ListPaginatedEntryLogsByAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedEntryLogsByAccountID", reflect.TypeOf((*MockStore)(nil).ListPaginatedEntryLogsByAccountID), arg0, arg1)
}

// ListPaginatedFromAccountTransactionLogs mocks base method.
func (m *MockStore) ListPaginatedFromAccountTransactionLogs(arg0 context.Context, arg1 sqlc_bank_account_store.ListPaginatedFromAccountTransactionLogsParams) ([]sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedFromAccountTransactionLogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedFromAccountTransactionLogs indicates an expected call of ListPaginatedFromAccountTransactionLogs.
func (mr *MockStoreMockRecorder) ListPaginatedFromAccountTransactionLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedFromAccountTransactionLogs", reflect.TypeOf((*MockStore)(nil).ListPaginatedFromAccountTransactionLogs), arg0, arg1)
}

// ListPaginatedToAccountTransactionLogs mocks base method.
func (m *MockStore) ListPaginatedToAccountTransactionLogs(arg0 context.Context, arg1 sqlc_bank_account_store.ListPaginatedToAccountTransactionLogsParams) ([]sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedToAccountTransactionLogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedToAccountTransactionLogs indicates an expected call of ListPaginatedToAccountTransactionLogs.
func (mr *MockStoreMockRecorder) ListPaginatedToAccountTransactionLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedToAccountTransactionLogs", reflect.TypeOf((*MockStore)(nil).ListPaginatedToAccountTransactionLogs), arg0, arg1)
}

// ListPaginatedTransactionLogs mocks base method.
func (m *MockStore) ListPaginatedTransactionLogs(arg0 context.Context, arg1 sqlc_bank_account_store.ListPaginatedTransactionLogsParams) ([]sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedTransactionLogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedTransactionLogs indicates an expected call of ListPaginatedTransactionLogs.
func (mr *MockStoreMockRecorder) ListPaginatedTransactionLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedTransactionLogs", reflect.TypeOf((*MockStore)(nil).ListPaginatedTransactionLogs), arg0, arg1)
}

// ListToAccountTransactionLogs mocks base method.
func (m *MockStore) ListToAccountTransactionLogs(arg0 context.Context, arg1 uuid.UUID) ([]sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListToAccountTransactionLogs", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListToAccountTransactionLogs indicates an expected call of ListToAccountTransactionLogs.
func (mr *MockStoreMockRecorder) ListToAccountTransactionLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListToAccountTransactionLogs", reflect.TypeOf((*MockStore)(nil).ListToAccountTransactionLogs), arg0, arg1)
}

// ListTransactionLogs mocks base method.
func (m *MockStore) ListTransactionLogs(arg0 context.Context) ([]sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionLogs", arg0)
	ret0, _ := ret[0].([]sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionLogs indicates an expected call of ListTransactionLogs.
func (mr *MockStoreMockRecorder) ListTransactionLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionLogs", reflect.TypeOf((*MockStore)(nil).ListTransactionLogs), arg0)
}

// LogEntry mocks base method.
func (m *MockStore) LogEntry(arg0 context.Context, arg1 sqlc_bank_account_store.LogEntryParams) (sqlc_bank_account_store.EntryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogEntry", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.EntryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogEntry indicates an expected call of LogEntry.
func (mr *MockStoreMockRecorder) LogEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEntry", reflect.TypeOf((*MockStore)(nil).LogEntry), arg0, arg1)
}

// LogTransaction mocks base method.
func (m *MockStore) LogTransaction(arg0 context.Context, arg1 sqlc_bank_account_store.LogTransactionParams) (sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogTransaction", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogTransaction indicates an expected call of LogTransaction.
func (mr *MockStoreMockRecorder) LogTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTransaction", reflect.TypeOf((*MockStore)(nil).LogTransaction), arg0, arg1)
}

// LogTransactionWithEntriesSimplified mocks base method.
func (m *MockStore) LogTransactionWithEntriesSimplified(arg0 context.Context, arg1 sqlc_bank_account_store.LogTransactionWithEntriesSimplifiedParams) (sqlc_bank_account_store.TransactionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogTransactionWithEntriesSimplified", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.TransactionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogTransactionWithEntriesSimplified indicates an expected call of LogTransactionWithEntriesSimplified.
func (mr *MockStoreMockRecorder) LogTransactionWithEntriesSimplified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTransactionWithEntriesSimplified", reflect.TypeOf((*MockStore)(nil).LogTransactionWithEntriesSimplified), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 sqlc_bank_account_store.TransferTxParams) (sqlc_bank_account_store.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccountWalletBalance mocks base method.
func (m *MockStore) UpdateAccountWalletBalance(arg0 context.Context, arg1 sqlc_bank_account_store.UpdateAccountWalletBalanceParams) (sqlc_bank_account_store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountWalletBalance", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountWalletBalance indicates an expected call of UpdateAccountWalletBalance.
func (mr *MockStoreMockRecorder) UpdateAccountWalletBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountWalletBalance", reflect.TypeOf((*MockStore)(nil).UpdateAccountWalletBalance), arg0, arg1)
}

// WithdrawTx mocks base method.
func (m *MockStore) WithdrawTx(arg0 context.Context, arg1 sqlc_bank_account_store.WithdrawTxParams) (sqlc_bank_account_store.WithdrawTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc_bank_account_store.WithdrawTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawTx indicates an expected call of WithdrawTx.
func (mr *MockStoreMockRecorder) WithdrawTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawTx", reflect.TypeOf((*MockStore)(nil).WithdrawTx), arg0, arg1)
}
