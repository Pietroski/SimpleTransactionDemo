// Code generated by sqlc. DO NOT EDIT.
// source: bank_operations.transactions.sql

package sqlc_bank_account_store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAccountWallets = `-- name: GetAccountWallets :many
SELECT w.row_id, w.wallet_id, w.account_id, w.coin, w.balance, w.created_at, w.updated_at
FROM account a
         INNER JOIN wallet w
                    ON a.account_id = w.account_id
WHERE a.account_id = $1
ORDER BY w.row_id
`

// GetAccountWallets - deprecated method
func (q *Queries) GetAccountWallets(ctx context.Context, accountID uuid.UUID) ([]Wallet, error) {
	rows, err := q.query(ctx, q.getAccountWalletsStmt, getAccountWallets, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.RowID,
			&i.WalletID,
			&i.AccountID,
			&i.Coin,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedAccountWallets = `-- name: GetPaginatedAccountWallets :many
SELECT w.row_id, w.wallet_id, w.account_id, w.coin, w.balance, w.created_at, w.updated_at
FROM account a
         INNER JOIN wallet w
                    ON a.account_id = w.account_id
WHERE a.account_id = $1
ORDER BY w.row_id
LIMIT $2 OFFSET $3
`

type GetPaginatedAccountWalletsParams struct {
	AccountID uuid.UUID `json:"accountID"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

// GetPaginatedAccountWallets - deprecated method
func (q *Queries) GetPaginatedAccountWallets(ctx context.Context, arg GetPaginatedAccountWalletsParams) ([]Wallet, error) {
	rows, err := q.query(ctx, q.getPaginatedAccountWalletsStmt, getPaginatedAccountWallets, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.RowID,
			&i.WalletID,
			&i.AccountID,
			&i.Coin,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedWalletsByAccountID = `-- name: GetPaginatedWalletsByAccountID :many
SELECT row_id, wallet_id, account_id, coin, balance, created_at, updated_at
FROM wallet
WHERE account_id = $1
ORDER BY row_id
LIMIT $2 OFFSET $3
`

type GetPaginatedWalletsByAccountIDParams struct {
	AccountID uuid.UUID `json:"accountID"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

// GetPaginatedWalletsByAccountID - paginates the return of the user's wallet.
func (q *Queries) GetPaginatedWalletsByAccountID(ctx context.Context, arg GetPaginatedWalletsByAccountIDParams) ([]Wallet, error) {
	rows, err := q.query(ctx, q.getPaginatedWalletsByAccountIDStmt, getPaginatedWalletsByAccountID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.RowID,
			&i.WalletID,
			&i.AccountID,
			&i.Coin,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTxWallet = `-- name: GetTxWallet :one
SELECT row_id, wallet_id, account_id, coin, balance, created_at, updated_at
FROM wallet
WHERE account_id = $1
  AND coin = $2
`

type GetTxWalletParams struct {
	AccountID uuid.UUID        `json:"accountID"`
	Coin      CryptoCurrencies `json:"coin"`
}

// GetTxWallet - gets the transacting user's wallet.
func (q *Queries) GetTxWallet(ctx context.Context, arg GetTxWalletParams) (Wallet, error) {
	row := q.queryRow(ctx, q.getTxWalletStmt, getTxWallet, arg.AccountID, arg.Coin)
	var i Wallet
	err := row.Scan(
		&i.RowID,
		&i.WalletID,
		&i.AccountID,
		&i.Coin,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletsByAccountID = `-- name: GetWalletsByAccountID :many
SELECT row_id, wallet_id, account_id, coin, balance, created_at, updated_at
FROM wallet
WHERE account_id = $1
ORDER BY row_id
`

// GetWalletsByAccountID - gets the user's wallet.
func (q *Queries) GetWalletsByAccountID(ctx context.Context, accountID uuid.UUID) ([]Wallet, error) {
	rows, err := q.query(ctx, q.getWalletsByAccountIDStmt, getWalletsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.RowID,
			&i.WalletID,
			&i.AccountID,
			&i.Coin,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountWalletBalance = `-- name: UpdateAccountWalletBalance :one
UPDATE wallet
SET balance    = balance + $1,
    updated_at = $2
WHERE account_id = $3
  AND wallet_id = $4
  AND coin = $5
RETURNING row_id, wallet_id, account_id, coin, balance, created_at, updated_at
`

type UpdateAccountWalletBalanceParams struct {
	Amount    int64            `json:"amount"`
	UpdatedAt time.Time        `json:"updatedAt"`
	AccountID uuid.UUID        `json:"accountID"`
	WalletID  uuid.UUID        `json:"walletID"`
	Coin      CryptoCurrencies `json:"coin"`
}

// UpdateAccountWalletBalance - deltas the user's balance within the database so it avoids potential deadlocks.
func (q *Queries) UpdateAccountWalletBalance(ctx context.Context, arg UpdateAccountWalletBalanceParams) (Wallet, error) {
	row := q.queryRow(ctx, q.updateAccountWalletBalanceStmt, updateAccountWalletBalance,
		arg.Amount,
		arg.UpdatedAt,
		arg.AccountID,
		arg.WalletID,
		arg.Coin,
	)
	var i Wallet
	err := row.Scan(
		&i.RowID,
		&i.WalletID,
		&i.AccountID,
		&i.Coin,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
