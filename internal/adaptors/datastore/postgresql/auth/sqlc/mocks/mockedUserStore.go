// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Pietroski/SimpleTransactionDemo/internal/adaptors/datastore/postgresql/auth/sqlc (interfaces: Store)

// Package mockedUserStore is a generated GoMock package.
package mockedUserStore

import (
	context "context"
	reflect "reflect"

	sqlc_auth_store "github.com/Pietroski/SimpleTransactionDemo/internal/adaptors/datastore/postgresql/auth/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sqlc_auth_store.CreateUserParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserRecovery mocks base method.
func (m *MockStore) CreateUserRecovery(arg0 context.Context, arg1 sqlc_auth_store.CreateUserRecoveryParams) (sqlc_auth_store.Recovering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRecovery", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Recovering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRecovery indicates an expected call of CreateUserRecovery.
func (mr *MockStoreMockRecorder) CreateUserRecovery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRecovery", reflect.TypeOf((*MockStore)(nil).CreateUserRecovery), arg0, arg1)
}

// CreateUserSession mocks base method.
func (m *MockStore) CreateUserSession(arg0 context.Context, arg1 sqlc_auth_store.CreateUserSessionParams) (sqlc_auth_store.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockStoreMockRecorder) CreateUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockStore)(nil).CreateUserSession), arg0, arg1)
}

// DeleteUserByEmail mocks base method.
func (m *MockStore) DeleteUserByEmail(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByEmail indicates an expected call of DeleteUserByEmail.
func (mr *MockStoreMockRecorder) DeleteUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmail", reflect.TypeOf((*MockStore)(nil).DeleteUserByEmail), arg0, arg1)
}

// DeleteUserByID mocks base method.
func (m *MockStore) DeleteUserByID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockStoreMockRecorder) DeleteUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockStore)(nil).DeleteUserByID), arg0, arg1)
}

// DeleteUserRecoveryByID mocks base method.
func (m *MockStore) DeleteUserRecoveryByID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRecoveryByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRecoveryByID indicates an expected call of DeleteUserRecoveryByID.
func (mr *MockStoreMockRecorder) DeleteUserRecoveryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRecoveryByID", reflect.TypeOf((*MockStore)(nil).DeleteUserRecoveryByID), arg0, arg1)
}

// DeleteUserRecoveryByRecoveryLink mocks base method.
func (m *MockStore) DeleteUserRecoveryByRecoveryLink(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRecoveryByRecoveryLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRecoveryByRecoveryLink indicates an expected call of DeleteUserRecoveryByRecoveryLink.
func (mr *MockStoreMockRecorder) DeleteUserRecoveryByRecoveryLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRecoveryByRecoveryLink", reflect.TypeOf((*MockStore)(nil).DeleteUserRecoveryByRecoveryLink), arg0, arg1)
}

// DeleteUserSessionByAccessToken mocks base method.
func (m *MockStore) DeleteUserSessionByAccessToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSessionByAccessToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSessionByAccessToken indicates an expected call of DeleteUserSessionByAccessToken.
func (mr *MockStoreMockRecorder) DeleteUserSessionByAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSessionByAccessToken", reflect.TypeOf((*MockStore)(nil).DeleteUserSessionByAccessToken), arg0, arg1)
}

// DeleteUserSessionByID mocks base method.
func (m *MockStore) DeleteUserSessionByID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSessionByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSessionByID indicates an expected call of DeleteUserSessionByID.
func (mr *MockStoreMockRecorder) DeleteUserSessionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSessionByID", reflect.TypeOf((*MockStore)(nil).DeleteUserSessionByID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 uuid.UUID) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserRecoveryByID mocks base method.
func (m *MockStore) GetUserRecoveryByID(arg0 context.Context, arg1 uuid.UUID) (sqlc_auth_store.Recovering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRecoveryByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Recovering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRecoveryByID indicates an expected call of GetUserRecoveryByID.
func (mr *MockStoreMockRecorder) GetUserRecoveryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRecoveryByID", reflect.TypeOf((*MockStore)(nil).GetUserRecoveryByID), arg0, arg1)
}

// GetUserRecoveryByRecoveryLink mocks base method.
func (m *MockStore) GetUserRecoveryByRecoveryLink(arg0 context.Context, arg1 string) (sqlc_auth_store.Recovering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRecoveryByRecoveryLink", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Recovering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRecoveryByRecoveryLink indicates an expected call of GetUserRecoveryByRecoveryLink.
func (mr *MockStoreMockRecorder) GetUserRecoveryByRecoveryLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRecoveryByRecoveryLink", reflect.TypeOf((*MockStore)(nil).GetUserRecoveryByRecoveryLink), arg0, arg1)
}

// GetUserSessionByAccessToken mocks base method.
func (m *MockStore) GetUserSessionByAccessToken(arg0 context.Context, arg1 string) (sqlc_auth_store.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionByAccessToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionByAccessToken indicates an expected call of GetUserSessionByAccessToken.
func (mr *MockStoreMockRecorder) GetUserSessionByAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionByAccessToken", reflect.TypeOf((*MockStore)(nil).GetUserSessionByAccessToken), arg0, arg1)
}

// GetUserSessionByID mocks base method.
func (m *MockStore) GetUserSessionByID(arg0 context.Context, arg1 uuid.UUID) (sqlc_auth_store.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionByID indicates an expected call of GetUserSessionByID.
func (mr *MockStoreMockRecorder) GetUserSessionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionByID", reflect.TypeOf((*MockStore)(nil).GetUserSessionByID), arg0, arg1)
}

// ListPaginatedUsers mocks base method.
func (m *MockStore) ListPaginatedUsers(arg0 context.Context, arg1 sqlc_auth_store.ListPaginatedUsersParams) ([]sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedUsers indicates an expected call of ListPaginatedUsers.
func (mr *MockStoreMockRecorder) ListPaginatedUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedUsers", reflect.TypeOf((*MockStore)(nil).ListPaginatedUsers), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context) ([]sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockStore) UpdateUserEmail(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserEmailParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockStoreMockRecorder) UpdateUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockStore)(nil).UpdateUserEmail), arg0, arg1)
}

// UpdateUserHashedPassword mocks base method.
func (m *MockStore) UpdateUserHashedPassword(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserHashedPasswordParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHashedPassword", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHashedPassword indicates an expected call of UpdateUserHashedPassword.
func (mr *MockStoreMockRecorder) UpdateUserHashedPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHashedPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserHashedPassword), arg0, arg1)
}

// UpdateUserName mocks base method.
func (m *MockStore) UpdateUserName(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserNameParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserName indicates an expected call of UpdateUserName.
func (mr *MockStoreMockRecorder) UpdateUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockStore)(nil).UpdateUserName), arg0, arg1)
}

// UpdateUserPermissions mocks base method.
func (m *MockStore) UpdateUserPermissions(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserPermissionsParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermissions", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPermissions indicates an expected call of UpdateUserPermissions.
func (mr *MockStoreMockRecorder) UpdateUserPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermissions", reflect.TypeOf((*MockStore)(nil).UpdateUserPermissions), arg0, arg1)
}

// UpdateUserRecoveryByRecoveryLink mocks base method.
func (m *MockStore) UpdateUserRecoveryByRecoveryLink(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserRecoveryByRecoveryLinkParams) (sqlc_auth_store.Recovering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRecoveryByRecoveryLink", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Recovering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRecoveryByRecoveryLink indicates an expected call of UpdateUserRecoveryByRecoveryLink.
func (mr *MockStoreMockRecorder) UpdateUserRecoveryByRecoveryLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRecoveryByRecoveryLink", reflect.TypeOf((*MockStore)(nil).UpdateUserRecoveryByRecoveryLink), arg0, arg1)
}

// UpdateUserRecoveryByUserID mocks base method.
func (m *MockStore) UpdateUserRecoveryByUserID(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserRecoveryByUserIDParams) (sqlc_auth_store.Recovering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRecoveryByUserID", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Recovering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRecoveryByUserID indicates an expected call of UpdateUserRecoveryByUserID.
func (mr *MockStoreMockRecorder) UpdateUserRecoveryByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRecoveryByUserID", reflect.TypeOf((*MockStore)(nil).UpdateUserRecoveryByUserID), arg0, arg1)
}

// UpdateUserRole mocks base method.
func (m *MockStore) UpdateUserRole(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserRoleParams) (sqlc_auth_store.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockStoreMockRecorder) UpdateUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockStore)(nil).UpdateUserRole), arg0, arg1)
}

// UpdateUserSessionByUserAccessToken mocks base method.
func (m *MockStore) UpdateUserSessionByUserAccessToken(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserSessionByUserAccessTokenParams) (sqlc_auth_store.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSessionByUserAccessToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSessionByUserAccessToken indicates an expected call of UpdateUserSessionByUserAccessToken.
func (mr *MockStoreMockRecorder) UpdateUserSessionByUserAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSessionByUserAccessToken", reflect.TypeOf((*MockStore)(nil).UpdateUserSessionByUserAccessToken), arg0, arg1)
}

// UpdateUserSessionByUserID mocks base method.
func (m *MockStore) UpdateUserSessionByUserID(arg0 context.Context, arg1 sqlc_auth_store.UpdateUserSessionByUserIDParams) (sqlc_auth_store.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSessionByUserID", arg0, arg1)
	ret0, _ := ret[0].(sqlc_auth_store.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSessionByUserID indicates an expected call of UpdateUserSessionByUserID.
func (mr *MockStoreMockRecorder) UpdateUserSessionByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSessionByUserID", reflect.TypeOf((*MockStore)(nil).UpdateUserSessionByUserID), arg0, arg1)
}
