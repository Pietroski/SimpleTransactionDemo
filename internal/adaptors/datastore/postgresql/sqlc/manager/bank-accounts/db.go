// Code generated by sqlc. DO NOT EDIT.

package bank_account_store

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getPaginatedUserWalletsStmt, err = db.PrepareContext(ctx, getPaginatedUserWallets); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedUserWallets: %w", err)
	}
	if q.getPaginatedWalletsByUserIDStmt, err = db.PrepareContext(ctx, getPaginatedWalletsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedWalletsByUserID: %w", err)
	}
	if q.getUserWalletsStmt, err = db.PrepareContext(ctx, getUserWallets); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserWallets: %w", err)
	}
	if q.getWalletsByUserIDStmt, err = db.PrepareContext(ctx, getWalletsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletsByUserID: %w", err)
	}
	if q.listFromUserTransactionLogsStmt, err = db.PrepareContext(ctx, listFromUserTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListFromUserTransactionLogs: %w", err)
	}
	if q.listPaginatedFromUserTransactionLogsStmt, err = db.PrepareContext(ctx, listPaginatedFromUserTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedFromUserTransactionLogs: %w", err)
	}
	if q.listPaginatedToUserTransactionLogsStmt, err = db.PrepareContext(ctx, listPaginatedToUserTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedToUserTransactionLogs: %w", err)
	}
	if q.listPaginatedTransactionLogsStmt, err = db.PrepareContext(ctx, listPaginatedTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedTransactionLogs: %w", err)
	}
	if q.listToUserTransactionLogsStmt, err = db.PrepareContext(ctx, listToUserTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListToUserTransactionLogs: %w", err)
	}
	if q.listTransactionLogsStmt, err = db.PrepareContext(ctx, listTransactionLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactionLogs: %w", err)
	}
	if q.logTransactionStmt, err = db.PrepareContext(ctx, logTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query LogTransaction: %w", err)
	}
	if q.updateUserWalletBalanceStmt, err = db.PrepareContext(ctx, updateUserWalletBalance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserWalletBalance: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getPaginatedUserWalletsStmt != nil {
		if cerr := q.getPaginatedUserWalletsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedUserWalletsStmt: %w", cerr)
		}
	}
	if q.getPaginatedWalletsByUserIDStmt != nil {
		if cerr := q.getPaginatedWalletsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedWalletsByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserWalletsStmt != nil {
		if cerr := q.getUserWalletsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserWalletsStmt: %w", cerr)
		}
	}
	if q.getWalletsByUserIDStmt != nil {
		if cerr := q.getWalletsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletsByUserIDStmt: %w", cerr)
		}
	}
	if q.listFromUserTransactionLogsStmt != nil {
		if cerr := q.listFromUserTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFromUserTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedFromUserTransactionLogsStmt != nil {
		if cerr := q.listPaginatedFromUserTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedFromUserTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedToUserTransactionLogsStmt != nil {
		if cerr := q.listPaginatedToUserTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedToUserTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listPaginatedTransactionLogsStmt != nil {
		if cerr := q.listPaginatedTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listToUserTransactionLogsStmt != nil {
		if cerr := q.listToUserTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listToUserTransactionLogsStmt: %w", cerr)
		}
	}
	if q.listTransactionLogsStmt != nil {
		if cerr := q.listTransactionLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionLogsStmt: %w", cerr)
		}
	}
	if q.logTransactionStmt != nil {
		if cerr := q.logTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing logTransactionStmt: %w", cerr)
		}
	}
	if q.updateUserWalletBalanceStmt != nil {
		if cerr := q.updateUserWalletBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserWalletBalanceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	getPaginatedUserWalletsStmt              *sql.Stmt
	getPaginatedWalletsByUserIDStmt          *sql.Stmt
	getUserWalletsStmt                       *sql.Stmt
	getWalletsByUserIDStmt                   *sql.Stmt
	listFromUserTransactionLogsStmt          *sql.Stmt
	listPaginatedFromUserTransactionLogsStmt *sql.Stmt
	listPaginatedToUserTransactionLogsStmt   *sql.Stmt
	listPaginatedTransactionLogsStmt         *sql.Stmt
	listToUserTransactionLogsStmt            *sql.Stmt
	listTransactionLogsStmt                  *sql.Stmt
	logTransactionStmt                       *sql.Stmt
	updateUserWalletBalanceStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		getPaginatedUserWalletsStmt:              q.getPaginatedUserWalletsStmt,
		getPaginatedWalletsByUserIDStmt:          q.getPaginatedWalletsByUserIDStmt,
		getUserWalletsStmt:                       q.getUserWalletsStmt,
		getWalletsByUserIDStmt:                   q.getWalletsByUserIDStmt,
		listFromUserTransactionLogsStmt:          q.listFromUserTransactionLogsStmt,
		listPaginatedFromUserTransactionLogsStmt: q.listPaginatedFromUserTransactionLogsStmt,
		listPaginatedToUserTransactionLogsStmt:   q.listPaginatedToUserTransactionLogsStmt,
		listPaginatedTransactionLogsStmt:         q.listPaginatedTransactionLogsStmt,
		listToUserTransactionLogsStmt:            q.listToUserTransactionLogsStmt,
		listTransactionLogsStmt:                  q.listTransactionLogsStmt,
		logTransactionStmt:                       q.logTransactionStmt,
		updateUserWalletBalanceStmt:              q.updateUserWalletBalanceStmt,
	}
}
